import 'dart:convert';
import 'dart:io' as io;
import 'package:googleapis_auth/auth_io.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'package:googleapis_auth/googleapis_auth.dart'; // Stelle sicher, dass dieses Package in pubspec.yaml enthalten ist
import 'package:flutter/services.dart' show rootBundle;
import 'package:shared_preferences/shared_preferences.dart';
import '../models/notification.dart';


class PushNotificationService {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final FirebaseDatabase _database = FirebaseDatabase.instance;
  bool _listenersInitialized = false;

  

  /// Initialisiert den PushNotificationService
  Future<void> initialize() async {
    print("üîî PushNotificationService wird gestartet...");

    try {
      if (!kIsWeb && defaultTargetPlatform == TargetPlatform.iOS) {
        print("üì± Anfrage f√ºr iOS-Push-Berechtigung...");
        await _firebaseMessaging.requestPermission();
        print("‚úÖ Berechtigungen erteilt");
      }

      startDatabaseListener();
      
      if (kIsWeb) {
        print("‚ö†Ô∏è Push-Benachrichtigungen sind auf Web nicht verf√ºgbar.");
        return;
      }

      print("üõ† Lade Service-Account...");
      final String serviceAccountJson = await rootBundle.loadString('assets/service-account.json');
      String? token = await _firebaseMessaging.getToken().timeout(
        Duration(seconds: 5),
        onTimeout: () {
          print("‚ùå Timeout: FCM-Token konnte nicht geholt werden");
          return null;
        },
      );
      print("‚úÖ FCM-Token: ${token ?? 'kein Token erhalten'}");

      await FirebaseMessaging.instance.subscribeToTopic('notifications');
      print("‚úÖ Erfolgreich zum Topic 'notifications' abonniert.");
    } catch (e) {
      print("‚ùå Fehler in PushNotificationService: $e");
    }
  }

  void startDatabaseListener() async {
  if (_listenersInitialized) {
    print("üîÑ Listener bereits aktiv. Kein erneuter Start.");
    return;
  }
  _listenersInitialized = true;
  
  String eventType;

  // Listener f√ºr Nachrichten
// Listener f√ºr News
DatabaseReference ref_news = _database.ref("News");
ref_news.onChildAdded.listen((event) => processEvent("News", "added", event));
ref_news.onChildChanged.listen((event) => processEvent("News", "changed", event));
ref_news.onChildRemoved.listen((event) => processEvent("News", "deleted", event));

// Listener f√ºr Termine (2025)
DatabaseReference ref_termine = _database.ref("Termine/2025");
ref_termine.onChildAdded.listen((event) => processEvent("Termine", "added", event));
ref_termine.onChildChanged.listen((event) => processEvent("Termine", "changed", event));
ref_termine.onChildRemoved.listen((event) => processEvent("Termine", "deleted", event));
}

void processEvent(String eventType, String action, DatabaseEvent event) async {
  // Sicherstellen, dass event.snapshot.value eine Map ist
  if (event.snapshot.value is Map<dynamic, dynamic>) {
    // Das Objekt ist eine Map, jetzt sicher umwandeln
    Map<String, dynamic> data = Map<String, dynamic>.from(event.snapshot.value as Map<dynamic, dynamic>);

    // Weiter mit deiner Verarbeitung
    if (data == null || data.isEmpty) {
  print("‚ö†Ô∏è Keine g√ºltigen Daten gefunden.");
  return;
}

    TeGNotification? n;
    String newsId = event.snapshot.key ?? "Keine ID verf√ºgbar"; 

    // Pr√ºfen, ob der eventType "News" oder "Termine" ist und die Daten verwenden
    if (eventType == "News") {
    // News-Verarbeitung
    print("‚úèÔ∏è News : $newsId");
    n = TeGNotification(
      id: newsId ?? '',
      type: "News",
      title: data["title"] ?? "Keine Nachricht verf√ºgbar",
      body: data["body"] ?? "",
      year: "",
      timestamp: data["lastUpdate"] ?? 0,
    );
  } else if (eventType == "Termine") {
    // Termine-Verarbeitung
    String terminId = data["id"].toString(); // ID der Termine
    print("‚úèÔ∏è Termin : $terminId");
    n = TeGNotification(
      id: terminId ?? '',
      type: "Termin",
      title: data["title"] ?? "Kein Titel verf√ºgbar",
      body: data["details"] ?? "",
      year: event.snapshot.ref.parent?.key ?? "",
      timestamp: data["lastUpdate"] ?? 0,
    );
  }
    // Wenn eine Benachrichtigung erstellt wurde, sende sie je nach Aktion
    if (n != null) {
      if (action == "added") {
        int lastFetchTime = await getLastFetchTime();
        print("‚ö†Ô∏èTimestamp Nachricht: ${n.timestamp} - LastFetchTimeStamp: $lastFetchTime");
        if (n.timestamp > lastFetchTime && lastFetchTime!=0) {
          print("üÜï Neue Nachricht: ${n.title}");
          await sendPushNotification(n, n.id); 
        } 
        await saveLastFetchTime();
      } else if (action == "changed") {
        print("‚úèÔ∏è Nachricht ge√§ndert: ${n.title}");
        await sendPushNotification(n, n.id);
      }
    } else {
      print("‚ö†Ô∏è Keine g√ºltige Benachrichtigung gefunden.");
    }
  } else {
    print("‚ö†Ô∏è Unerwartetes Datenformat: ${event.snapshot.value}");
  }
}

Future<void> saveLastFetchTime() async {
  final prefs = await SharedPreferences.getInstance();
  prefs.setInt("lastFetchTime", DateTime.now().millisecondsSinceEpoch);
}

Future<int> getLastFetchTime() async {
  final prefs = await SharedPreferences.getInstance();
  return prefs.getInt("lastFetchTime") ?? 0;
}

  /// Sendet eine Push-Nachricht √ºber die Firebase Cloud Messaging API
  Future<void> sendPushNotification(TeGNotification notifi, String newsId) async {
    String? newToken = await FirebaseMessaging.instance.getToken();

    if (newToken==null || newToken.isEmpty || newToken.length < 20) {
      print("‚ö†Ô∏è Fehler: Kein g√ºltiger FCM-Token! Empfangener Token: $newToken");
      return;
    }

    final String? accessToken = await getAccessToken();
    if (accessToken == null) {
      print("‚ùå Fehler: Kein Access Token erhalten!");
      return;
    }

    final Uri url = Uri.parse("https://fcm.googleapis.com/v1/projects/db-teg/messages:send");

    // Erstelle die Nachricht und den Link
    final Map<String, dynamic> payload = {
      "message": {
        "token": newToken,  // Zielger√§t
        "data": {
          "title": notifi.title,
          "type": notifi.type,
          "body": notifi.body,
          "year": notifi.year?.toString() ?? "",
          "id": newsId,
        },
        "android": {
          "priority": "high",
        },
        "apns": {
          "payload": {
            "aps": {
              "content-available": 1,
            }
          }
        }
      }
    };

    final response = await http.post(
      url,
      headers: {
        "Authorization": "Bearer $accessToken",
        "Content-Type": "application/json",
      },
      body: jsonEncode(payload),
    );

    if (response.statusCode == 200) {
      print("‚úÖ Push-Nachricht erfolgreich gesendet!");
    //  await saveNotificationToDatabase(notifi);
    } else {
      print("‚ùå Fehler beim Senden der Push-Nachricht: ${response.body}");
    }
  }

  Future<void> saveNotificationToDatabase(TeGNotification notification) async {
  DatabaseReference dbRef = FirebaseDatabase.instance.ref("notifications");

  await dbRef.push().set(notification.toMap());

  print("‚úÖ Nachricht in der Datenbank gespeichert.");
}


  Future<String?> getAccessToken() async {
  try {
    final String serviceAccountJson = await rootBundle.loadString('assets/service-account.json');
    final Map<String, dynamic> serviceAccountData = jsonDecode(serviceAccountJson);

    var credentials = ServiceAccountCredentials.fromJson(serviceAccountData);
    var client = await clientViaServiceAccount(
      credentials,
      ['https://www.googleapis.com/auth/firebase.messaging'],
    );

    return client.credentials.accessToken.data;
  } catch (e) {
    print("Fehler beim Abrufen des Access Tokens: $e");
    return null;
  }
}
/// L√§dt asynchron die Service-Account JSON-Datei
  Future<String> getServiceAccountJson() async {
  try {
    return await rootBundle.loadString('assets/service-account.json');
  } catch (e) {
    print("‚ùå Fehler beim Laden des Service Accounts: $e");
    return "";
  }
}

}